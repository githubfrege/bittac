using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;

namespace TicTacToeConsole
{
   
    static class Program
    {
        const int DefaultNum = 3; //all numbers based on this, for convenience
        const int Cols = DefaultNum;
        const int Rows = DefaultNum;
        const int NInARow = DefaultNum;
        public static List<long> Diagonals;
        public static long[] HorizontalOptions;
        public static long[] VerticalOptions;
        public static long NewLineMask;
        public static int HammingWeight(long n)
        {
            int ret = 0;
            while (n != 0)
            {
                n &= (n - 1);
                ret++;
            }
            return ret;
        }
        public static int MaxConsecutiveOnes(long x)
        {

            // Initialize result
            int count = 0;

            // Count the number of iterations
            // to reach x = 0.
            while (x != 0)
            {

                // This operation reduces length
                // of every sequence of 1s by one.
                x = (x & (x << 1));

                count++;
            }

            return count;
        }
        public static void GetStraightValues()
        {
            long[] horizontal = new long[Rows];
            for (int i = 1; i <= Rows; i++)
            {
                long rowValue = 0;
                for (int j = 1; j <= Cols; j++)
                {
                    long currentVal = (1 << ((Cols * (i - 1)) + j));
                    rowValue |= currentVal;

                }
                horizontal[i - 1] = rowValue;
                

            }
            HorizontalOptions = horizontal;
            long[] vertical = new long[Cols];
            for (int i = 1; i <= Cols; i++)
            {
                long colValue = 0;
                for (int j = 1; j <= Rows; j++)
                {
                    long currentVal = (1 << ((Cols * (j - 1)) + i));
                    colValue |= currentVal;

                }
                vertical[i - 1] = colValue;
                
            }
            VerticalOptions = vertical;
        }
    
        public static long PlaceMark(long marks, int row, int col)
        {
            int idx = ((Cols * (row - 1)) + col);
            marks = marks | (long)(1 << idx);
            return marks;
        }

        public static void GetDiagonals(bool anti)
        {
            List<long> corners = new List<long>();
            long dontTouch = 0;
            List<long> diagonals = new List<long>();
            for (int i = 1; i <= Cols; i++) {
                corners.Add(1 << i);
                
            }
            for (int i = 1; i <= Cols; i++)
            {
                dontTouch |= (long)(1 << ((Cols * (Rows - 1)) + i));
            }
           
           
            if (anti)
            {
  
                for (int i = 1; i <= Rows; i++)
                {
                    corners.Add(1 << (1 + (Cols * i)) + (Cols - 1));
                    dontTouch |= (long)(1 << (1 + (Cols * i)));
                }
                /*Debug.WriteLine(Convert.ToString(corners[0] | corners[1] | corners[2] | corners[3] | corners[4], toBase: 2));
                Debug.WriteLine(Convert.ToString(dontTouch, toBase: 2));*/
                foreach (long corner in corners)
                {
                    
                    long diagonal = corner;
                    int diagNum = (int)(double)(Math.Log(diagonal) / Math.Log(2.0));
                    Debug.WriteLine("diagnum" + diagNum);
                    long newValue = 0;
                    int idx = 1;
                    while ((newValue & dontTouch) == 0)
                    {
                        newValue = (1 << (diagNum + (Cols * idx) - idx));
                        Debug.WriteLine($"new value:{(int)(double)(Math.Log(newValue) / Math.Log(2.0))}");
                        if ((newValue & dontTouch) == 0)
                        {
                            diagonal |= newValue;
                        }
                        else
                        {
                            diagonal |= newValue;
                            string str = Convert.ToString(diagonal,toBase:2);
                            if (str.Length == 10)
                            {
                                diagonals.Add(diagonal);
                                Debug.WriteLine(Convert.ToString(diagonal, toBase: 2));
                            }
                            
                        }
                        idx++;
                    }
                }
            }
            else
            {
                for (int i = 1; i <= Rows; i++)
                {
                    corners.Add(1 << (1 + (Cols * i)));
                    dontTouch |= (long)(1 << (1 + (Cols * i)) + (Cols - 1));
                }
               
                foreach (long corner in corners)
                {
                    long diagonal = corner;
                    int diagNum = (int)(double)(Math.Log(diagonal) / Math.Log(2.0));
                    Debug.WriteLine("diagnum" + diagNum);
                    long newValue = 0;
                    int idx = 1;
                    while ((newValue & dontTouch) == 0)
                    {
                        newValue = (1 << (diagNum + (Cols * idx) + idx));
                        Debug.WriteLine($"new value:{(int)(double)(Math.Log(newValue) / Math.Log(2.0))}");
                        if ((newValue & dontTouch) == 0)
                        {
                            diagonal |= newValue;
                        }
                        else
                        {
                            diagonal |= newValue;
                            string str = Convert.ToString(diagonal, toBase: 2);
                            if (str.Length == 10)
                            {
                                diagonals.Add(diagonal);
                                Debug.WriteLine(Convert.ToString(diagonal, toBase: 2));
                            }

                        }
                        idx++;
                    }
                }

            }
            Diagonals = diagonals;

        }


        public static bool HasWon(long marks)
        {
            //check horizontal
           foreach (long option in HorizontalOptions)
            {
                if (MaxConsecutiveOnes((marks & option)) >= NInARow)
                {
                    return true;
                }
            }
            foreach (long option in VerticalOptions)
            {
                if (MaxConsecutiveOnes((marks & option)) >= NInARow)
                {
                    return true;
                }
            }
            foreach (long option in Diagonals)
            {
                if (MaxConsecutiveOnes((marks & option)) >= NInARow)
                {
                    return true;
                }
            }
            return false;

            //check vertical win

        }
        public static void GenerateNewLineMask()
        {
            long mask = 0;
            for (int i = 1; i < Rows; i++)
            {
                mask |= (long)(1 << (i * Cols));
            }
        }
        public static void RenderBoard(long marks, string symbol)
        {
            for (int i = 0; i < Rows * Cols; i++)
            {
                if ((NewLineMask & (1 << i)) != 0)
                {
                    Console.WriteLine("\n");
                }
                else if ((marks & (1 << i)) != 0)
                {
                    Console.Write(symbol);
                }
                else
                {
                    Console.Write("#");
                }
            }
            
        }
        static void Main(string[] args)
        {
            long playerMarks = 0;
            long opponentMarks = 0;
           GetDiagonals(true);
            GetDiagonals(false);
            GetStraightValues();
            GenerateNewLineMask();
            Console.WriteLine("make your mark");
            long myMark = PlaceMark(playerMarks, Console.ReadLine()[0], Console.ReadLine()[1]);
            if ((myMark & (playerMarks | opponentMarks)) == 0)
            {
                playerMarks |= myMark;
            }
            RenderBoard(playerMarks, "O");

          
            
            
        }
    }
}
