using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;


namespace TicTacToeConsole
{
   
    static class Program
    {
        const int DefaultNum = 3; //all numbers based on this, for convenience
        const int Cols = DefaultNum;
        const int Rows = DefaultNum;
        const int NInARow = DefaultNum;
        public static int Desired;
        public static List<long> Diagonals;
        public static long[] ValidatorHorizontal;
        public static long[] ValidatorVertical;

        public static void GetValidator(int foo, int bar, long[] vali)
        {
            int[] validator = new int[foo];
            for (int i = 1; i <= foo; i++)
            {
                for (int j = 1; j <= bar; j++)
                {
                    long currentVal = (1 << (i * j));
                    if (currentVal != 0)
                    {
                        validator[i] = validator[i] | (int)currentVal;
                    }

                }
            }
        }
        public static long PlaceMark(long marks, int row, int col)
        {
            int idx = ((Cols * (row - 1)) + col);
            marks = marks | (1 << idx);
            return marks;
        }
        public static void SetDesiredBits()
        {
            int desired = 0;
            for (int i = 1; i <= NInARow; i++)
            {
                desired = desired | 1 << i;
            }
            Desired = desired;
        }
        public static void GetDiagonals(bool anti)
        {
            List<long> corners = new List<long>();
            long dontTouch = 0;
            List<long> diagonals = new List<long>();
            for (int i = 1; i <= Cols; i++) {
                corners.Add(1 << i);
            }
            for (int i = 1; i <= Cols; i++)
            {
                dontTouch |= (1 << ((Cols * (Rows - 1)) + i) );
            }
            if (anti)
            {
  
                for (int i = 1; i <= Rows; i++)
                {
                    corners.Add(1 << (1 + (Cols * i)) + (Cols - 1));
                    dontTouch |= (1 << (1 + (Cols * i)));
                }
                foreach (long corner in corners)
                {
                    long diagonal = corner;
                    int diagNum = (int)(double)(Math.Log(diagonal) / Math.Log(2.0));
                    long newValue = 0;
                    while ((newValue & dontTouch) == 0)
                    {
                        newValue = (1 << ((diagNum - 1) + Cols));
                        if ((newValue & dontTouch) == 0)
                        {
                            diagonal |= newValue;
                        }
                        else
                        {
                            return;
                        }
                    }
                    diagonals.Add(diagonal);



                }
            }
            else
            {
                for (int i = 1; i <= Rows; i++)
                {
                    corners.Add(1 << (1 + (Cols * i)));
                    dontTouch |= (1 << (1 + (Cols * i)) + (Cols - 1));
                }
               
                foreach (long corner in corners)
                {
                    long diagonal = corner;
                    int diagNum = (int)(double)(Math.Log(diagonal) / Math.Log(2.0));
                    long newValue = 0;
                    while ((newValue & dontTouch) == 0)
                    {
                        newValue = (1 << ((diagNum + 1) + Cols));
                        if ((newValue & dontTouch) == 0)
                        {
                            diagonal |= newValue;
                        }
                        else
                        {
                            return;
                        }
                    }

                    diagonals.Add(diagonal);
                }


            }
            Diagonals = diagonals;

        }

        public static bool CheckStraightLine( this long marks, int foo, int bar)
        {

            
          
           
        }
        public static bool HasWon(long marks)
        {
            //check horizontal win
            if (marks.CheckStraightLine(Rows, Cols))
            {
                return true;
            }
            else if (marks.CheckStraightLine(Cols, Rows))
            {
                return true;
            }
            foreach (long diagonal in Diagonals)
            {
                for (int i = 0; i < HammingWeight(diagonal); i++)
                {

                }
            }
            
            //check vertical win

        }
        static void Main(string[] args)
        {
            long playerMarks = 0;
            long opponentMarks = 0;
            SetDesiredBits();
            GetDiagonals(true);
            GetDiagonals(false);
            GetValidator(Cols, Rows);
            GetValidator(Rows, Cols);
            Console.WriteLine("make your mark");
            long myMark = PlaceMark(playerMarks, Console.ReadLine()[0], Console.ReadLine()[1]);
            if ((myMark & (playerMarks | opponentMarks)) == 0)
            {
                playerMarks = myMark;
            }


          
            
            
        }
    }
}
