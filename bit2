using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;

namespace TicTacToeConsole
{
   
    static class Program
    {
        const int DefaultNum = 3; //all numbers based on this, for convenience
        const int Cols = DefaultNum;
        const int Rows = DefaultNum;
        const int NInARow = DefaultNum;
        public static List<int[]> Diagonals = new List<int[]>();
        public static List<long> DiagonalOptions = new List<long>();
        public static long[] HorizontalOptions;
        public static long[] VerticalOptions;
        public static long NewLineMask;
        public static int HammingWeight(long n)
        {
            int ret = 0;
            while (n != 0)
            {
                n &= (n - 1);
                ret++;
            }
            return ret;
        }
        public static int MaxConsecutiveOnes(long x)
        {

            // Initialize result
            int count = 0;

            // Count the number of iterations
            // to reach x = 0.
            while (x != 0)
            {

                // This operation reduces length
                // of every sequence of 1s by one.
                x = (x & (x << 1));

                count++;
            }

            return count;
        }
        public static void GetStraightValues()
        {
            long[] horizontal = new long[Rows];
            for (int i = 1; i <= Rows; i++)
            {
                long rowValue = 0;
                for (int j = 1; j <= Cols; j++)
                {
                    long currentVal = (1 << ((Cols * (i - 1)) + j));
                    rowValue |= currentVal;

                }
                horizontal[i - 1] = rowValue;
                

            }
            HorizontalOptions = horizontal;
            long[] vertical = new long[Cols];
            for (int i = 1; i <= Cols; i++)
            {
                long colValue = 0;
                for (int j = 1; j <= Rows; j++)
                {
                    long currentVal = (1 << ((Cols * (j - 1)) + i));
                    colValue |= currentVal;

                }
                vertical[i - 1] = colValue;
                
            }
            VerticalOptions = vertical;
        }
    
        public static long Mark(int row, int col)
        {
            int idx = ((Cols * (row - 1)) + col);
            return (long)(1 << idx);
        }
       
        static void antidiagonal(int[,] A)
        {
            // For each column start row is 0
            for (int col = 0; col < Cols; col++)
            {
                int startcol = col, startrow = 0;

                while (startcol >= 0 && startrow < Rows)
                {
                    Console.Write(A[startrow, startcol] + " ");
                    
                    startcol--;
                    startrow++;
                }
                Console.WriteLine();
            }

            // For each row start column is N-1
            for (int row = 1; row < Rows; row++)
            {
                int startrow = row, startcol = Rows - 1;

                while (startrow < Rows && startcol >= 0)
                {
                    Console.Write(A[startrow, startcol] + " ");
                    startcol--;
                    startrow++;
                }
                Console.WriteLine();
            }
        }
        static void diagonal(int[,] A)
        {
    
            // For each column start row is 0
            for (int col = 0; col < Cols; col++)
            {
                int startcol = col, startrow = 0;

                while (startcol < Cols && startrow < Rows)
                {
                    Console.Write(A[startrow, startcol] + " ");
                    startcol++;
                    startrow++;
                }
                Console.WriteLine();
            }

            // For each row start column is 0
            for (int row = 1; row < Rows; row++)
            {
                int startrow = row, startcol = 0;

                while (startrow < Rows && startcol < Rows)
                {
                    Console.Write(A[startrow, startcol] + " ");
                    startcol++;
                    startrow++;
                }
                Console.WriteLine();
            }
        }
        public static int[,] GetMatrix()
        {
            int[,] myMatrix = new int[Cols, Rows];
            int n = 0;
            for (int i = 0; i < Cols; i++)
            {
                for (int j = 0; j < Rows; j++)
                {
                    n++;
                    myMatrix[i, j] = n;
                }


            }
            return myMatrix;
        }
        public static bool HasWon(long marks)
        {
            //check horizontal
           foreach (long option in HorizontalOptions)
            {
                if (MaxConsecutiveOnes((marks & option)) >= NInARow)
                {
                    return true;
                }
            }
            foreach (long option in VerticalOptions)
            {
                if (MaxConsecutiveOnes((marks & option)) >= NInARow)
                {
                    return true;
                }
            }
            foreach (long option in DiagonalOptions)
            {
                if (MaxConsecutiveOnes((marks & option)) >= NInARow)
                {
                    return true;
                }
            }
            return false;

            //check vertical win

        }
        public static void GenerateNewLineMask()
        {
            long mask = 0;
            for (int i = 1; i <= Rows; i++)
            {
                mask |= (long)(1 << (i * Cols));
            }
            NewLineMask = mask;
        }
        public static void RenderBoard(long marks, string symbol)
        {

            for (int i = 0; i < Rows * Cols; i++)
            {

                if ((NewLineMask & (1 << (i))) != 0)
                {
                    Console.WriteLine("\n");
                    
                }
                if ((marks & (1 << (i + 1))) != 0)
                {
                    Console.Write(symbol);
                }
                else
                {
                    Console.Write("#");
                }
            }
            
        }
        public static void Play(ref long marks, long otherMarks)
        {
            string str = Console.ReadLine();
            long myMark = Mark(str[0], str[1]);
            Console.WriteLine("my mark" + Convert.ToString(myMark, toBase: 2));
          
            if ((myMark & (marks | otherMarks)) == 0)
            {
                marks |= myMark;
            }
            RenderBoard(marks, "O");
            Console.WriteLine("all marks" + Convert.ToString(marks, toBase: 2));
            if (HasWon(marks))
            {
                Console.WriteLine("You won!");
            }
        }
        static void Main(string[] args)
        {
            long playerMarks = 0;
            long opponentMarks = 0;
            GetStraightValues();
            GenerateNewLineMask();
            Console.WriteLine(Convert.ToString(NewLineMask, toBase: 2));
            int[,] matrix = GetMatrix();
            antidiagonal(matrix);
            diagonal(matrix);
            for (int i = 0; i < Rows; i++)
            {
                for (int j = 0; j < Cols; j++)
                {
                    Console.Write(matrix[i, j]);
                }
                Console.WriteLine();
            }

            foreach (long diagonal in DiagonalOptions)
            {
                Console.WriteLine(Convert.ToString(diagonal,toBase:2));
            }
            Console.WriteLine("make your mark");
            while (true)
            {
                Play(ref playerMarks, opponentMarks);
            }
            
            

          
            
            
        }
    }
}
